name: 'Serverless Deploy/Remove'
description: 'Composite Action for serverless deploy/remove commands'
inputs:
  region:
    description: "Region to deploy to/remove from"
    required: true
    default: ${{ matrix.region }}
  stage:
    description: "The Stage being deployed/removed"
    required: true
    default: ${{ matrix.stage }}
  service:
    description: "The Service being deployed/removed"
    required: true
  action:
    description: "The specified command (package/deploy/remove)"
    default: "deploy"
    required: false
  stack_policy_stages:
    description: "Comma delimited list of stages to apply stack policy against"
    default: "dev,prod,master"
    required: false
  stack_policy_file:
    description: "Path to an optional stack policy file to be applied (deployment only!)"
    default: ""
    required: false
  args:
    description: "Additional deployment arguments"
    default: ""
    required: false
  verbose:
    description: "Boolean: serverless verbose deployment"
    default: "false"
    required: false
  debug:
    description: "Boolean: serverless debug deployment"
    default: "false"
    required: false
  upload:
    description: "Upload packaged template artifact"
    default: "false"
    required: false
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Set git user
      id: git-user
      run: git config --local user.name "${GITHUB_ACTOR}"
      shell: bash
    - name: Serverless Package
      id: sls-package
      if: inputs.action == 'package' || inputs.action == 'deploy'
      run: |
        echo "::group::Package"
        yarn sls package --region=${{ inputs.region }} --stage=${{ inputs.stage }}
        echo "::endgroup::"
      shell: bash
    - name: Wait
      id: wait
      if: inputs.action == 'deploy' || inputs.action == 'remove'
      run: |
        echo "::group::Wait"
        yarn aws-cloudformation-wait-ready --region=${{ inputs.region }} --stack-name=${{ inputs.service }}-${{ inputs.stage }}
        echo "::endgroup::"
      shell: bash
    - name: Serverless Remove
      id: sls-remove
      if: inputs.action == 'remove'
      run: |
        echo "::group::Serverless Remove"
        yarn sls remove --region=${{ inputs.region }} --stage=${{ inputs.stage }}
        echo "::endgroup::"
      shell: bash
    - name: Serverless Deploy
      id: sls-deploy
      if: inputs.action == 'deploy'
      run: |
        echo "::group::Serverless Deploy"
        args+=(${{ inputs.args }})
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          args+=(--verbose)
        fi
        if [[ "${{ inputs.debug }}" == "true" ]]; then
          export SLS_DEBUG=*
        fi
        yarn sls deploy --region=${{ inputs.region }} --stage=${{ inputs.stage }} --package=.serverless "${args[@]}"
        echo "::endgroup::"
      shell: bash
    - name: stack-policy
      id: stack-policy
      if: inputs.action == 'deploy'
      run: |
        echo "::group::Stack Policy"
        IFS=',' read -r -a array <<< "${{ inputs.stack_policy_stages }}"
        if [[ ! -z "${{ inputs.stack_policy_file }}" ]]; then
          if [[ "${array[*]}" =~ "${{ inputs.stage }}" ]]; then
            aws cloudformation set-stack-policy --stack-name ${{ inputs.service }}-${{ inputs.stage }} \
              --stack-policy-body file://${{ inputs.stack_policy_file }}
          else
            echo "Not applying stack policy - stage not valid"
          fi
        else
          echo "Not applying stack policy - no stack policy file provided"
        fi
        echo "::endgroup::"
      shell: bash
    - name: Upload
      uses: actions/upload-artifact@v2
      if: inputs.upload == 'true'
      with:
        name: serverless-template
        path: |
          .serverless/*.json
